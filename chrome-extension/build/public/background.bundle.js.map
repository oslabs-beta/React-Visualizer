{"version":3,"file":"background.bundle.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://react-visualizer/webpack/bootstrap","webpack://react-visualizer/webpack/runtime/make namespace object","webpack://react-visualizer/./src/extensions/background.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const extensions = 'https://developer.chrome.com/docs/extensions';\nconst webstore = 'https://developer.chrome.com/docs/webstore';\n//creating a context menu\nchrome.runtime.onInstalled.addListener(async () => {\n  chrome.contextMenus.create({\n    title: 'C-React',\n    id: 'cReactContextMenu',\n    contexts: ['selection'],\n  });\n});\n\n//opening up a new window when the cReact is selected\nchrome.contextMenus.onClicked.addListener((info, tab) => {\n  if (info.menuItemId == 'cReactContextMenu') {\n    chrome.windows.create({\n      url: 'panel.html',\n    });\n  }\n});\n\nlet openCount = 0;\nchrome.runtime.onConnect.addListener(function (port) {\n  if (port.name == 'devtools-page') {\n    openCount++;\n    port.onDisconnect.addListener(function (port) {\n      openCount--;\n    });\n  }\n});\n\nlet connections = {};\nconst treeOfTrees = {};\n\nchrome.tabs.onActivated.addListener((activeInfo) => {\n  let selectedTabId = activeInfo.tabId;\n\n  chrome.runtime.onConnect.addListener(function (devToolsConnection) {\n    // assign the listener function to a variable so we can remove it later\n    if (devToolsConnection.name == 'devtools-page') {\n      var devToolsListener = function (message, sender, sendResponse) {\n        // Inject a content script into the identified tab\n        connections[selectedTabId] = devToolsConnection;\n        //expecting tabId and file:scriptToInject\n        chrome.scripting\n          .executeScript({\n            //target tab\n            target: { tabId: selectedTabId },\n            //inject the content script to above tab\n            files: [message.scriptToInject],\n          })\n          .then(() => console.log('script injected'));\n      };\n\n      // add the listener to the one time message - postMessage\n      devToolsConnection.onMessage.addListener(devToolsListener);\n\n      // when we are disconnected, we remove the listener\n      devToolsConnection.onDisconnect.addListener(function () {\n        devToolsConnection.onMessage.removeListener(devToolsListener);\n        var tabs = Object.keys(connections);\n        for (var i = 0, len = tabs.length; i < len; i++) {\n          if (connections[tabs[i]] == devToolsConnection) {\n            //delete the connection tab\n            delete connections[tabs[i]];\n            break;\n          }\n        }\n      });\n    }\n  });\n\n  // chrome.runtime.onMessage.addListener((message) => {\n  // Get the tree object from the message\n  // if (message.tree) {\n  //   //set tab as key, tree object as value\n  //   treeOfTrees[selectedTabId] = message.tree;\n  //   chrome.storage.session.set({ key: treeOfTrees }).then(() => {\n  //     console.log('setting chrome storage to trees in first render');\n  //     console.log(treeOfTrees);\n  //   });\n  //   console.log('msg tree in first render');\n  //   console.log(treeOfTrees);\n  // chrome.runtime.sendMessage({ domTreeObj: treeOfTrees });\n  // }\n  // if (message.nestedObject) {\n  //   treeOfTrees[selectedTabId] = message.nestedObject;\n  //   //set updated tree in chrome storage\n  //   // chrome.storage.local.set({ key: treeOfTrees }).then(() => {\n  //   //   console.log('setting chrome storage to tres in second render');\n  //   //   console.log(treeOfTrees);\n  //   // });\n  //   console.log('setting chrome storage to tres in second render');\n  //   console.log(treeOfTrees);\n  //   chrome.runtime.sendMessage({ nestedObject: treeOfTrees });\n  // }\n  //     if (message.storedVitals) {\n  //       chrome.runtime.sendMessage({ storedVitalsfromBG: message.storedVitals });\n  //     }\n  //   });\n});\n"],"names":[],"sourceRoot":""}