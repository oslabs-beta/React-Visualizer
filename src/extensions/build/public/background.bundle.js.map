{"version":3,"file":"background.bundle.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://react-visualizer/webpack/bootstrap","webpack://react-visualizer/webpack/runtime/make namespace object","webpack://react-visualizer/./src/extensions/background.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable */\n// @ts-nocheck\n\nconst extensions = 'https://developer.chrome.com/docs/extensions';\nconst webstore = 'https://developer.chrome.com/docs/webstore';\n\nchrome.runtime.onInstalled.addListener(async () => {\n  chrome.contextMenus.create({\n    id: 'cReactContextMenu',\n    title: 'C-React',\n    contexts: ['selection'],\n  });\n});\n\nchrome.contextMenus.onClicked.addListener((info, tab) => {\n  console.log('item clicked');\n  console.log(info.menuItemId);\n  if (info.menuItemId == 'cReactContextMenu') {\n    console.log('onclikc working');\n    chrome.windows.create({\n      url: 'panel.html',\n    });\n    // chrome.windows.create({\n    //   type: 'panel',\n    //   left: 0,\n    //   top: 0,\n    //   width: 1000,\n    //   height: 1000,\n    //   url: chrome.runtime.getURL('panel.html'),\n    // })\n  }\n});\n\nchrome.runtime.onConnect.addListener(function (port) {\n  let name = 'knockknock';\n});\n\n// function injectCode(tabId) {\n//   chrome.scripting.executeScript({\n//     target: { tabId: tabId },\n//     files: ['/injectScript.js'],\n//   });\n// }\n\n// // Background page -- background.js\n// chrome.runtime.onConnect.addListener(function (devToolsConnection) {\n//   // assign the listener function to a variable so we can remove it later\n//   var devToolsListener = function (message, sender, sendResponse) {\n//     // Inject a content script into the identified tab\n//     console.log(message.tabId);\n//     chrome.scripting.executeScript(message.tabId, {\n//       file: message.scriptToInject,\n//     });\n//   };\n//   // add the listener\n//   devToolsConnection.onMessage.addListener(devToolsListener);\n\n//   devToolsConnection.onDisconnect.addListener(function () {\n//     devToolsConnection.onMessage.removeListener(devToolsListener);\n//   });\n// });\n\n// chrome.runtime.onConnect.addListener(function (devToolsConnection) {\n//   // assign the listener function to a variable so we can remove it later\n//   var devToolsListener = function (message, sender, sendResponse) {\n//     // Inject a content script into the identified tab\n//     console.log(message.tabId);\n//     connections[message.tabId] = devToolsConnection;\n//     chrome.scripting\n//       .executeScript({\n//         tabId: message.tabId,\n//         target: { tabId: message.tabId },\n//         files: [message.scriptToInject],\n//       })\n//       .then(() => console.log('script injected'));\n//     console.log(message.tabId);\n//   };\n//   // add the listener\n//   devToolsConnection.onMessage.addListener(devToolsListener);\n\n//   devToolsConnection.onDisconnect.addListener(function () {\n//     //devToolsConnection.onMessage.removeListener(devToolsListener);\n//     var tabs = Object.keys(connections);\n//     for (var i = 0, len = tabs.length; i < len; i++) {\n//       if (connections[tabs[i]] == devToolsConnection) {\n//         delete connections[tabs[i]];\n//         break;\n//       }\n//     }\n//   });\n// });\n\n//\n\n// chrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n//   // Messages from content scripts should have sender.tab set\n//   if (sender.tab) {\n//     console.log('this is sender id in background js ' + sender.tab.id);\n//     var tabId = sender.tab.id;\n//     if (tabId in connections) {\n//       connections[tabId].postMessage(request);\n//     } else {\n//       console.log('Tab not found in connection list.');\n//     }\n//   } else {\n//     console.log('sender.tab not defined.');\n//   }\n//   return true;\n// });\n\n// chrome.browserAction.onClicked.addListener(function () {\n//   chrome.tabs.query(\n//     {\n//       currentWindow: true,\n//       active: true,\n//       // Select active tab of the current window\n//     },\n//     function (tab) {\n//       chrome.tabs.sendMessage(\n//         // Send a message to the content script\n//         tab[0].id,\n//         { line: 'countparas' }\n//       );\n//     }\n//   );\n// });\n\n//new 3/11/23\nlet id = null;\nconst connections = {};\n\nchrome.runtime.onConnect.addListener((devToolsConnection) => {\n  // Assign the listener function to a variable so we can remove it later\n  let devToolsListener = (message, sender, sendResponse) => {\n    if (message.name == 'init') {\n      id = message.tabId;\n      connections[id] = devToolsConnection;\n      // Send a message back to DevTools\n      console.log('one line above connections[id].postMessage(\"Connected!\")');\n      connections[id].postMessage('Connected!');\n    }\n  };\n\n  // Listen to messages sent from the DevTools page\n  devToolsConnection.onMessage.addListener(devToolsListener);\n\n  devToolsConnection.onDisconnect.addListener(() => {\n    devToolsConnection.onMessage.removeListener(devToolsListener);\n  });\n});\n\n// var source = new EventSource('http://localhost:3001/stream');\n// source.addEventListener(\n//   'open',\n//   function (e) {\n//     // send the information to the panel\n//     connections[id].postMessage({\n//       name: 'init',\n//       tabId: id,\n//     });\n//     console.log('Connection to the server established');\n//   },\n//   false\n// );\n\n// source.onmessage = function (e) {\n//   console.log('Received message from server: ', e.data);\n//   // send the information to the panel\n//   connections[id].postMessage({\n//     name: 'init',\n//     tabId: id,\n//   });\n\n//   chrome.runtime.sendMessage({ data: e.data, log: e.log });\n//   // document.getElementById(\"content\").innerHTML += e.data + \"<br/>\";\n// };\n"],"names":[],"sourceRoot":""}