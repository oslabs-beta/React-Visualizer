{"version":3,"file":"background.bundle.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://react-visualizer/webpack/bootstrap","webpack://react-visualizer/webpack/runtime/make namespace object","webpack://react-visualizer/./src/extensions/background.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable */\n// @ts-nocheck\n\nconst extensions = 'https://developer.chrome.com/docs/extensions';\nconst webstore = 'https://developer.chrome.com/docs/webstore';\n\n\nchrome.runtime.onInstalled.addListener(function() {\n  chrome.contextMenus.create({\n    \"id\": \"sampleContextMenu\",\n    \"title\": \"Sample Context Menu\",\n    \"contexts\": [\"selection\"]\n  });\n});\n// chrome.action.onClicked.addListener(async (tab) => {\n//   console.log(\n//     'background script running'\n//   )\n  // if (tab.url.startsWith(extensions) || tab.url.startsWith(webstore)) {\n  //   // Retrieve the action badge to check if the extension is 'ON' or 'OFF'\n  //   const prevState = await chrome.action.getBadgeText({ tabId: tab.id });\n  //   // Next state will always be the opposite\n  //   const nextState = prevState === 'ON' ? 'OFF' : 'ON'\n\n  //   // Set the action badge to the next state\n  //   await chrome.action.setBadgeText({\n  //     tabId: tab.id,\n  //     text: nextState,\n  //   });\n\n  //   if (nextState === \"ON\") {\n  //       // Insert the CSS file when the user turns the extension on\n  //       await chrome.scripting.insertCSS({\n  //         files: [\"focus-mode.css\"],\n  //         target: { tabId: tab.id },\n  //       });\n  //     } else if (nextState === \"OFF\") {\n  //       // Remove the CSS file when the user turns the extension off\n  //       await chrome.scripting.removeCSS({\n  //         files: [\"focus-mode.css\"],\n  //         target: { tabId: tab.id },\n  //       });\n  //     }\n  //   }\n  // });\n"],"names":[],"sourceRoot":""}