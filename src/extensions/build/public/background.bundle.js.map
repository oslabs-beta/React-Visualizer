{"version":3,"file":"background.bundle.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://react-visualizer/webpack/bootstrap","webpack://react-visualizer/webpack/runtime/make namespace object","webpack://react-visualizer/./src/extensions/background.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable */\n// @ts-nocheck\n\nconst extensions = 'https://developer.chrome.com/docs/extensions';\nconst webstore = 'https://developer.chrome.com/docs/webstore';\n\n\nchrome.runtime.onInstalled.addListener(async()=> {\n  chrome.contextMenus.create({\n    title: \"C-React\",\n    id:\"cReactContextMenu\",\n    contexts: [\"selection\"]\n  });\n});\n\n\nchrome.contextMenus.onClicked.addListener((info, tab)=>{\n  console.log(\"item clicked\");\n  console.log(info.menuItemId);\n  if(info.menuItemId == \"cReactContextMenu\"){\n    console.log('onclikc working')\n    chrome.windows.create({\n      url: ('panel.html'),\n    })\n  }\n});\n\n\nvar openCount = 0;\nchrome.runtime.onConnect.addListener(function (port) {\n    if (port.name == \"devtools-page\") {\n      if (openCount == 0) {\n        alert(\"DevTools window opening.\");\n      }\n      openCount++;\n      port.onDisconnect.addListener(function(port) {\n          openCount--;\n          if (openCount == 0) {\n            alert(\"Last DevTools window closing.\");\n          }\n      });\n    }\n});\n\nlet connections = {};\n\n// chrome.runtime.onConnect.addListener(function(devToolsConnection) {\n//   // assign the listener function to a variable so we can remove it later\n//   var devToolsListener = function(message, sender, sendResponse) {\n//       // Inject a content script into the identified tab\n//       console.log(message.tabId);\n//       chrome.tabs.executeScript(message.tabId,\n//           { file: message.scriptToInject });\n//   }\n//   // add the listener\n//   devToolsConnection.onMessage.addListener(devToolsListener);\n\n//   devToolsConnection.onDisconnect.addListener(function() {\n//       devToolsConnection.onMessage.removeListener(devToolsListener);\n//   });\n// });\n\n// Background page -- background.js\n\nchrome.runtime.onConnect.addListener(function(devToolsConnection) {\n  // assign the listener function to a variable so we can remove it later\n  console.log(devToolsConnection);\n  if(devToolsConnection.name == 'devtools-page'){\n    var devToolsListener = function(message, sender, sendResponse) {\n      // Inject a content script into the identified tab\n        connections[message.tabId] = devToolsConnection;\n        console.log(message.tabId);\n        chrome.scripting.executeScript(\n            // message.tabId,\n            // { files: message.scriptToInject }\n        {\n              target: {tabId:message.tabId},\n              files : [message.scriptToInject]\n        }).then(() => console.log(\"script injected\"));\n    }\n    // add the listener\n    devToolsConnection.onMessage.addListener(devToolsListener);\n\n    devToolsConnection.onDisconnect.addListener(function() {\n        devToolsConnection.onMessage.removeListener(devToolsListener);\n        var tabs = Object.keys(connections);\n          for (var i=0, len=tabs.length; i < len; i++) {\n            if (connections[tabs[i]] == devToolsConnection) {\n              delete connections[tabs[i]]\n              break;\n            }\n          }\n    });\n\n  }\n});\n\n\n// Receive message from content script and relay to the devTools page for the\n// current tab\nchrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {\n    // Messages from content scripts should have sender.tab set\n    if (sender.tab) {\n      console.log(sender.tab.id);\n      var tabId = sender.tab.id;\n      if (tabId in connections) {\n        connections[tabId].postMessage(request);\n      } else {\n        console.log(\"Tab not found in connection list.\");\n      }\n    } else {\n      console.log(\"sender.tab not defined.\");\n    }\n    return true;\n});\n\n  "],"names":[],"sourceRoot":""}