{"version":3,"file":"content.bundle.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://react-visualizer/webpack/bootstrap","webpack://react-visualizer/webpack/runtime/make namespace object","webpack://react-visualizer/./src/extensions/contentScript.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable */\n// @ts-nocheck\n\n// console.log(document.querySelector(':root'));\n// console.log(document.documentElement);\n// console.log(document.getElementsByTagName('html'));\n\n// const treeWalker = document.createTreeWalker(\n//   document.querySelector('root'),\n//   NodeFilter.SHOW_ELEMENT,\n//   {\n//     acceptNode(node) {\n//       NodeFilter.FILTER_ACCEPT;\n//     },\n//   }\n// );\n\nconst nodeObj = {};\n\nfunction grabTreeFromBrowser() {\n  // const root = document.documentElement;\n  const root = document.getElementById('root');\n\n  const tree = document.createTreeWalker(root);\n  //create tree walker\n  const node = tree.currentNode;\n  const levels = [];\n  //BFS\n  const queue = [{ domNode: node, context: nodeObj, level: 1 }];\n  while (queue.length > 0) {\n    //context aka pointer to layer of object\n    const { domNode, context, level } = queue.shift();\n    console.log(level);\n    // context.innerHTML = domNode.innerHTML;\n    if (level > levels.length) {\n      levels.push(['']);\n    } else {\n      levels[level - 1].push('');\n    }\n    const height = level;\n    const width = levels[level - 1].length;\n    //comment\n    // context.id = { height: height, width: width };\n    // context.width = levels[level - 1].length;\n    //comment\n    if (!context.attributes) context.attributes = {};\n    if (!context.name) context.name = '';\n    if (domNode.nodeName) context.name = domNode.nodeName;\n    if (\n      domNode.nodeName === '#text' &&\n      domNode.textContent !== null &&\n      domNode.textContent !== undefined\n    ) {\n      context.attributes.content = domNode.textContent;\n    }\n    const keys = Object.keys(domNode);\n    if (keys.length > 1 && keys[1].includes('__reactProps')) {\n      const propKeys = Object.keys(domNode[keys[1]]);\n      for (let i = 0; i < propKeys.length; i++) {\n        if (propKeys[i].includes('on')) {\n          context.attributes[propKeys[i]] = domNode[keys[1]][propKeys[i]];\n        }\n      }\n    }\n    if (domNode.childNodes !== null && domNode.childNodes.length > 0) {\n      for (let i = 0; i < domNode.childNodes.length; i++) {\n        context.children\n          ? context.children.push({})\n          : (context.children = [{}]);\n        queue.push({\n          domNode: domNode.childNodes[i],\n          context: context.children[i],\n          level: level + 1,\n        });\n      }\n    }\n  }\n  console.log(nodeObj);\n  return nodeObj;\n}\ngrabTreeFromBrowser();\n\nconst treeData4 = JSON.stringify(nodeObj);\n\nconst port = chrome.runtime.connect({ name: 'knockknock' });\nport.postMessage({ joke: 'Knock knock' });\nconsole.log(port.name);\nport.onMessage.addListener(function (msg) {\n  console.log(msg);\n  if (msg.question === \"Who's there?\")\n    port.postMessage({ treeData: treeData4 });\n  else if (msg.question === 'Madame who?')\n    port.postMessage({ answer: 'Madame... Bovary' });\n});\n"],"names":[],"sourceRoot":""}