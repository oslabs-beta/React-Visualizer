{"version":3,"file":"content.bundle.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://react-visualizer/webpack/bootstrap","webpack://react-visualizer/webpack/runtime/make namespace object","webpack://react-visualizer/./src/extensions/contentScript.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable */\n// @ts-nocheck\n\n//alert('content script running');\nconsole.log('hello, content script is finally running');\n\n\nconsole.log(document.querySelector(':root'));\nconsole.log(document.documentElement);\nconsole.log(document.getElementsByTagName(\"html\"))\n\n\nconst treeWalker = document.createTreeWalker(\n    document.querySelector(':root'),\n    NodeFilter.SHOW_ELEMENT,\n    {\n      acceptNode(node) {\n        NodeFilter.FILTER_ACCEPT\n      },\n    }\n);\n  \nconst nodeList = [];\nlet currentNode = treeWalker.currentNode;\n\nwhile (currentNode) {\n    nodeList.push({\n        \"name\":currentNode.tagName,\n        \"children\":currentNode.firstChild\n    });\n    currentNode = treeWalker.nextNode();\n}\nconsole.log(nodeList);\nlet treeData = JSON.stringify(nodeList);\nlet treeData3 = JSON.parse(JSON.stringify(nodeList));\n\nconsole.log('0',treeData)\nconsole.log('3',treeData3)\n\n\nchrome.storage.local.set({ treeData: treeData }).then(() => {\n  console.log(\"Value is set to \" + treeData);\n});\n\n//listening to content script connection\nchrome.runtime.onConnect.addListener(function(port) {\n  //console.assert(port.name === \"knockknock\");\n  port.onMessage.addListener(function(msg) {\n    console.log(msg.joke);\n    console.log(msg.answer);\n    if (msg.joke === \"Knock knock\")\n      port.postMessage({question: \"Who's there?\"});\n    else if (msg.answer === \"Madame\")\n      port.postMessage({question: \"Madame who?\"});\n    else if (msg.answer === \"Madame... Bovary\")\n      port.postMessage({question: \"I don't get it.\"});\n  });\n});\n\n\n\n// function grabTreeFromBrowser() {\n//     const root = document.getElementById('root');\n//     //create tree walker\n//     console.log(root);\n//     const tree = document.createTreeWalker(root);\n//     const node = tree.currentNode;\n//     const nodeObj = {};\n//     const levels = [];\n//     //BFS\n//     const queue = [{ domNode: node, context: nodeObj, level: 1 }];\n//     while (queue.length > 0) {\n//       //context aka pointer to layer of object\n//       const { domNode, context, level } = queue.shift();\n//       console.log(level);\n//       context.innerHTML = domNode.innerHTML;\n//       if (level > levels.length) {\n//         levels.push(['']);\n//       } else {\n//         levels[level - 1].push('');\n//       }\n//       const height = level;\n//       const width = levels[level - 1].length;\n//       context.id = { height: height, width: width };\n//       context.width = levels[level - 1].length;\n//       if (!context.attributes) context.attributes = {};\n//       if (!context.name) context.name = '';\n//       if (domNode.nodeName) context.name = domNode.nodeName;\n//       if (\n//         domNode.nodeName === '#text' &&\n//         domNode.textContent !== null &&\n//         domNode.textContent !== undefined\n//       ) {\n//         context.attributes.content = domNode.textContent;\n//       }\n//       const keys = Object.keys(domNode);\n//       if (keys.length > 1 && keys[1].includes('__reactProps')) {\n//         const propKeys = Object.keys(domNode[keys[1]]);\n//         for (let i = 0; i < propKeys.length; i++) {\n//           if (propKeys[i].includes('on')) {\n//             context.attributes[propKeys[i]] = domNode[keys[1]][propKeys[i]];\n//           }\n//         }\n//       }\n//       if (domNode.childNodes !== null && domNode.childNodes.length > 0) {\n//         for (let i = 0; i < domNode.childNodes.length; i++) {\n//           context.children\n//             ? context.children.push({})\n//             : (context.children = [{}]);\n//           queue.push({\n//             domNode: domNode.childNodes[i],\n//             context: context.children[i],\n//             level: level + 1,\n//           });\n//         }\n//       }\n//     }\n//     console.log(nodeObj);\n//     return nodeObj;\n//   }\n//   grabTreeFromBrowser();"],"names":[],"sourceRoot":""}